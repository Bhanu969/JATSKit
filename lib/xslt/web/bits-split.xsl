<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:ojf="https://github.com/wendellpiez/oXygenJATSframework/ns"
  exclude-result-prefixes="xs"
  version="2.0">
  
  <!-- delivers a sequence of BITS instances for a single BITS instance
         input. Each of the new instances is a single book with a single
         book-part, with the contents of a single book-part (or other element)
         marked for splitting.
         
         In place of descendant book-parts (or other elements) marked for splitting,
         it has (wrapped) xref elements pointing to them.
         
         (Marked with @specific-use flags to show they are generated by the split.)
         
         Note: having no ID on a book-part (or any element promoted to book-part) should be
         an error condition. Similarly, any duplicate ID anywhere should be an error condition
         due to cross-referencing complications - but these are prevented in the cleanup-IDs step -
         
         The results come wrapped in an ad hoc 'book-sequence' wrapper, in no namespace.
         
         When JATS is input, a BITS instance is returned with the JATS document
         presented as the single BITS book-part.
         (To do: map JATS metadata into BITS metadata for these purposes?)
         Note this is *not* guaranteed to be schema-valid to BITS!
         
         (Plus: can we use XLink to connect BITS sequences of JATS documents?)
         
         Note that xref[@rid] eventually needs to be rewritten as
         an external (not internal) link ... so it should be ornamented
         with an indicator of its closest ancestor book-part
         
         -->
  
  <xsl:template match="book">
    <ojf:book-sequence>
      <xsl:copy-of select="/*/namespace::*"/>
      <xsl:apply-templates select="//*[exists(@ojf:split)]" mode="split"/>
    </ojf:book-sequence>
  </xsl:template>
  
  <xsl:template match="*" mode="split">
    <book>
      <xsl:copy-of select="/book/book-meta"/>
      <xsl:apply-templates select="." mode="make-book-part"/>
    </book>
  </xsl:template>
  
  <xsl:template match="book-part" mode="make-book-part">
    <xsl:copy>
      <xsl:apply-templates select="node() | @*"/>
    </xsl:copy>
  </xsl:template>
  
  <xsl:template match="*" mode="make-book-part">
    <book-part>
      <xsl:copy>
        <xsl:apply-templates select="node() | @*"/>
      </xsl:copy>
    </book-part>
  </xsl:template>

  <xsl:template match="*[exists(@ojf:split)]">
    <ojf:split to="{@id}"/>
  </xsl:template>
  
  <xsl:template match="node() | @*">
    <xsl:copy>
      <xsl:apply-templates select="node() | @*"/>
    </xsl:copy>
  </xsl:template>

</xsl:stylesheet>